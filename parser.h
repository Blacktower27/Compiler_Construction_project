#pragma once
#include<stdio.h>
#include<string.h>
#include<malloc.h>
#include <stdbool.h>
#include <stdlib.h>
#include"symbol_table.h"
#include"pares_tree.h"

tree_node* parsing(Node* table);
int trans_slr(char* ch);

static const int parsing_table_action[72][23] = {		//parsing_table_action[state][nonterminal]
			  //0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22
			  //&&  (   )   *   +   -   /   ;   <~  =   >   bo  id  el  if  !   in  li  wh  {   ||  }   $   
    /*state0 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	4,	-1,	-1,	-1,	-1,	5,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state1 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	999,
    /*state2 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	-1,	-1,
    /*state3 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	4,	74,	-1,	74,	-1,	5,	-1,	74,	-1,	-1,	-1,	-1,
    /*state4 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	13,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state5 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	14,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state6 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	72,
    /*state7 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	88,	88,
    /*state8 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	90,	90,
    /*state9 */	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	17,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state10*/	-1,	18,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state11*/	-1,	19,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state12*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	73,	-1,	73,	-1,	-1,	-1,	73,	-1,	-1,	-1,	-1,
    /*state13*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	20,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state14*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	21,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state15*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	87,	87,
    /*state16*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	89,	89,
    /*state17*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state18*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state19*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state20*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	76,	76,	-1,	76,	-1,	76,	-1,	76,	-1,	-1,	-1,	-1,
    /*state21*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	75,	75,	-1,	75,	-1,	75,	-1,	75,	-1,	-1,	-1,	-1,
    /*state22*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state23*/	-1,	-1,	-1,	-1,	39,	40,	-1,	41,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state24*/	83,	-1,	83,	83,	83,	83,	83,	83,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	83,	-1,	-1,
    /*state25*/	80,	-1,	80,	42,	80,	80,	43,	80,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	80,	-1,	-1,
    /*state26*/	85,	-1,	85,	85,	85,	85,	85,	85,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	85,	-1,	-1,
    /*state27*/	86,	-1,	86,	86,	86,	86,	86,	86,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	86,	-1,	-1,
    /*state28*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state29*/	-1,	-1,	45,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	46,	-1,	-1,
    /*state30*/	-1,	-1,	94,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	94,	-1,	-1,
    /*state31*/	100,-1,	100,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	100,-1,	-1,
    /*state32*/	47,	-1,	96,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	96,	-1,	-1,
    /*state33*/	98,	-1,	98,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	98,	-1,	-1,
    /*state34*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	48,	49,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state35*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state36*/	103,-1,	103,-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	103,-1,	-1,
    /*state37*/	-1,	-1,	51,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	46,	-1,	-1,
    /*state38*/	-1,	-1,	52,	-1,	39,	40,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state39*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state40*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state41*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	77,	-1,	77,	-1,	-1,	-1,	77,	-1,	-1,	77,	77,
    /*state42*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state43*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state44*/	-1,	-1,	57,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	46,	-1,	-1,
    /*state45*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	58,	-1,	-1,	-1,
    /*state46*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state47*/	-1,	28,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	34,	-1,	-1,	35,	-1,	36,	-1,	-1,	-1,	-1,	-1,
    /*state48*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state49*/	-1,	22,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	26,	-1,	-1,	-1,	-1,	27,	-1,	-1,	-1,	-1,	-1,
    /*state50*/	97,	-1,	97,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	97,	-1,	-1,
    /*state51*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	63,	-1,	-1,	-1,
    /*state52*/	84,	-1,	84,	84,	84,	84,	84,	84,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	84,	-1,	-1,
    /*state53*/	78,	-1,	78,	42,	78,	78,	43,	78,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	78,	-1,	-1,
    /*state54*/	79,	-1,	79,	42,	79,	79,	43,	79,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	79,	-1,	-1,
    /*state55*/	81,	-1,	81,	81,	81,	81,	81,	81,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	81,	-1,	-1,
    /*state56*/	82,	-1,	82,	82,	82,	82,	82,	82,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	82,	-1,	-1,
    /*state57*/	99,	-1,	99,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	99,	-1,	-1,
    /*state58*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	-1,	-1,
    /*state59*/	-1,	-1,	93,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	93,	-1,	-1,
    /*state60*/	-1,	-1,	95,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	95,	-1,	-1,
    /*state61*/	102,-1,	102,-1,	39,	40,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	102,-1,	-1,
    /*state62*/	101,-1,	101,-1,	39,	40,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	101,-1,	-1,
    /*state63*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	-1,	-1,
    /*state64*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	66,	-1,
    /*state65*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	67,	-1,
    /*state66*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	68,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
    /*state67*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	91,	-1,	91,	-1,	-1,	-1,	91,	-1,	-1,	91,	91,
    /*state68*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	69,	-1,	-1,	-1,
    /*state69*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	9,	-1,	10,	-1,	-1,	-1,	11,	-1,	-1,	-1,	-1,
    /*state70*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	71,	-1,
    /*state71*/	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	92,	-1,	92,	-1,	-1,	-1,	92,	-1,	-1,	92,	92,
};

static const int parsing_table_goto[72][14] = {			//parsing_table_action[state][terminal]
//A	 B	C	D	E	F	L	P	Q	R	S	T	U	V
1,	2,	-1,	3,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	6,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	12,	-1,	3,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	15,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	-1,	16,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	23,	24,	-1,	-1,	-1,	-1,	-1,	25,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	29,	30,	31,	-1,	-1,	32,	33,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	37,	30,	31,	-1,	-1,	32,	33,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	38,	24,	-1,	-1,	-1,	-1,	-1,	25,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	44,	30,	31,	-1,	-1,	32,	33,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	31,	-1,	-1,	50,	33,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	24,	-1,	-1,	-1,	-1,	-1,	53,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	24,	-1,	-1,	-1,	-1,	-1,	54,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	55,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	56,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	59,	31,	-1,	-1,	32,	33,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	60,	31,	-1,	-1,	32,	33,
-1,	-1,	-1,	-1,	61,	24,	-1,	-1,	-1,	-1,	-1,	25,	-1,	-1,
-1,	-1,	-1,	-1,	62,	24,	-1,	-1,	-1,	-1,	-1,	25,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	64,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	65,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	70,	-1,	-1,	-1,	7,	-1,	-1,	-1,	8,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
};

static const char rules[33][20]={
        "A'->A",                //0
        "A->BC",                //1
        "B->DB",
        "B->D",
        "D->int id;",
        "D->bool id;",
        "S->id<~E;",
        "E->E+T",
        "E->E-T",
        "E->T",
        "T->T*F",
        "T->T/F",
        "T->F",
        "F->(E)",
        "F->id",
        "F->lit",
        "C->LC",
        "C->L",
        "C->SC",
        "C->S",
        "L->while(P){C}",
        "L->if(P){C}else{C}",
        "P->P||Q",
        "P->Q",
        "Q->U&&Q",
        "Q->U",
        "U->!U",
        "U->V",
        "V->(P)",
        "V->R",
        "R->id>E",
        "R->id=E",
        "R->lit",                //32
		};
		
static const int nofr[]={0,2,2,1,3,3,4,3,3,1,3,3,1,3,1,1,2,1,2,1,7,11,3,1,3,1,2,1,3,1,3,3,1};//number of reduce

//Stack
//This part is from Data struct lab3
typedef struct stack_node
{
	char token[50];
    char id[50];
	int state;
    tree_node* t_node;
}stack_node;

typedef struct {
	stack_node* values;
	int top;
	int maxTop;
} Stack;

/* function: create a new stack
 * input: *stack: pointer to the stack
 * 		  size: the size of the stack
 * output: true if the stack is created successful and false otherwise
 */
bool CreateStack(Stack* stack, int size);

/* function: tests whether a stack is empty
 * input: *stack: pointer to the stack
 * output: true if the stack is empty and false otherwise
 */
bool IsEmpty(Stack* stack);

/* function: tests whether a stack is full
 * input: *stack: pointer to the stack
 * output: true if the stack is full and false otherwise
 */
bool IsFull(Stack* stack);

/* function: find the top value of a stack
 * input: *stack: pointer to the stack
 *        *x: the top value of the stack
 * output: true if the stack has top value and false otherwise
 */
bool Top(Stack* stack, stack_node* x);

/* function: add a new element with value x to the top of the stack
 * input: *stack: pointer to the stack
 * 		  x: the value of the new element
 * output: true if push successful and false otherwise
 */
bool Push(Stack* stack, stack_node x);

/* function: remove an element from the top of the stack
 * input: *stack: pointer to the stack
 *        *x: the value of the top after pop
 * output: true if pop successful and false otherwise
 */
bool Pop(Stack* stack, stack_node* x);

/* function: print all values of the stack
 * input: *stack: pointer to the stack
 */
void DisplayStack(Stack* stack);

/* function: destroy the stack
 * input: *stack: pointer to the stack
 */

void DisplayError(Stack* stack, int num);

void DestroyStack(Stack* stack);